package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"
)

// ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
const (
	ColorReset  = "\033[0m"
	ColorRed    = "\033[31m"
	ColorGreen  = "\033[32m"
	ColorYellow = "\033[33m"
	ColorBlue   = "\033[34m"
	ColorPurple = "\033[35m"
	ColorCyan   = "\033[36m"
	ColorWhite  = "\033[37m"
)

// Timer —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–∞
type Timer struct {
	Duration time.Duration
	Message  string
}

// NewTimer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
func NewTimer(seconds int, message string) *Timer {
	if message == "" {
		message = "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!"
	}
	return &Timer{
		Duration: time.Duration(seconds) * time.Second,
		Message:  message,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
func (t *Timer) Start() {
	totalSeconds := int(t.Duration.Seconds())
	
	fmt.Printf("%süöÄ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ %d —Å–µ–∫—É–Ω–¥!%s\n", ColorGreen, totalSeconds, ColorReset)
	fmt.Printf("%süí° –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã%s\n\n", ColorYellow, ColorReset)

	// –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
	for i := totalSeconds; i > 0; i-- {
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
		var color string
		switch {
		case i <= 5:
			color = ColorRed // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ - –∫—Ä–∞—Å–Ω—ã–π
		case i <= 10:
			color = ColorYellow // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ - –∂–µ–ª—Ç—ã–π
		default:
			color = ColorCyan // –û–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è - –≥–æ–ª—É–±–æ–π
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
		timeStr := formatTime(i)
		
		// –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
		progressBar := createProgressBar(totalSeconds-i, totalSeconds, 30)
		
		fmt.Printf("\r%s‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: %s %s%s", 
			color, timeStr, progressBar, ColorReset)
		
		time.Sleep(1 * time.Second)
	}

	// –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	t.showNotification()
}

// formatTime —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
func formatTime(seconds int) string {
	if seconds >= 3600 { // –±–æ–ª—å—à–µ —á–∞—Å–∞
		hours := seconds / 3600
		minutes := (seconds % 3600) / 60
		secs := seconds % 60
		return fmt.Sprintf("%02d:%02d:%02d", hours, minutes, secs)
	} else if seconds >= 60 { // –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã
		minutes := seconds / 60
		secs := seconds % 60
		return fmt.Sprintf("%02d:%02d", minutes, secs)
	}
	return fmt.Sprintf("00:%02d", seconds)
}

// createProgressBar —Å–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
func createProgressBar(current, total, width int) string {
	if total == 0 {
		return ""
	}
	
	progress := float64(current) / float64(total)
	filled := int(progress * float64(width))
	
	bar := "["
	for i := 0; i < width; i++ {
		if i < filled {
			bar += "="
		} else if i == filled {
			bar += ">"
		} else {
			bar += " "
		}
	}
	bar += "]"
	
	percentage := int(progress * 100)
	return fmt.Sprintf("%s %d%%", bar, percentage)
}

// showNotification –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
func (t *Timer) showNotification() {
	fmt.Printf("\n\n")
	
	// –ú–∏–≥–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	for i := 0; i < 3; i++ {
		fmt.Printf("\r%süîî %s üîî%s", ColorRed, t.Message, ColorReset)
		time.Sleep(500 * time.Millisecond)
		fmt.Printf("\r%s                    %s", ColorReset, strings.Repeat(" ", len(t.Message)+10))
		time.Sleep(500 * time.Millisecond)
	}
	
	fmt.Printf("\r%süéâ %s üéâ%s\n", ColorGreen, t.Message, ColorReset)
	
	// ASCII –∞—Ä—Ç —á–∞—Å–æ–≤
	fmt.Println(ColorPurple + `
    ‚è∞ –í–†–ï–ú–Ø –í–´–®–õ–û! ‚è∞
    
     12  1  2  3
   11           4
  10      ‚Ä¢      5
   9            6
     8  7  6  5
	` + ColorReset)
}

// parseInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
func parseInput(input string) (int, error) {
	input = strings.TrimSpace(input)
	
	// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–≤–æ–¥–∞
	if strings.Contains(input, "m") || strings.Contains(input, "min") {
		// –ú–∏–Ω—É—Ç—ã: "5m", "10min"
		numStr := strings.ReplaceAll(input, "m", "")
		numStr = strings.ReplaceAll(numStr, "in", "")
		numStr = strings.TrimSpace(numStr)
		
		minutes, err := strconv.Atoi(numStr)
		if err != nil {
			return 0, fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–∏–Ω—É—Ç")
		}
		return minutes * 60, nil
	}
	
	if strings.Contains(input, "h") || strings.Contains(input, "hour") {
		// –ß–∞—Å—ã: "1h", "2hour"
		numStr := strings.ReplaceAll(input, "h", "")
		numStr = strings.ReplaceAll(numStr, "our", "")
		numStr = strings.TrimSpace(numStr)
		
		hours, err := strconv.Atoi(numStr)
		if err != nil {
			return 0, fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤")
		}
		return hours * 3600, nil
	}
	
	// –û–±—ã—á–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã
	seconds, err := strconv.Atoi(input)
	if err != nil {
		return 0, fmt.Errorf("–≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
	}
	
	if seconds <= 0 {
		return 0, fmt.Errorf("–≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
	}
	
	if seconds > 86400 { // –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫
		return 0, fmt.Errorf("–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - 24 —á–∞—Å–∞ (86400 —Å–µ–∫—É–Ω–¥)")
	}
	
	return seconds, nil
}

// showHelp –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
func showHelp() {
	fmt.Println(ColorCyan + "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:" + ColorReset)
	fmt.Println("‚Ä¢ –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ: 30 (—Å–µ–∫—É–Ω–¥—ã)")
	fmt.Println("‚Ä¢ –° –º–∏–Ω—É—Ç–∞–º–∏: 5m, 10min")
	fmt.Println("‚Ä¢ –° —á–∞—Å–∞–º–∏: 1h, 2hour")
	fmt.Println("‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: help, quit, exit")
	fmt.Println()
}

func main() {
	// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
	fmt.Println(ColorBlue + "üïê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∏–Ω–∏-–¢–∞–π–º–µ—Ä!" + ColorReset)
	fmt.Println(ColorGreen + "‚≠ê –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –∏ –ø–æ–ª—É—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏!" + ColorReset)
	fmt.Println()
	
	showHelp()
	
	scanner := bufio.NewScanner(os.Stdin)
	
	for {
		fmt.Printf("%s–í–≤–µ–¥–∏ –≤—Ä–µ–º—è (–∏–ª–∏ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏): %s", ColorWhite, ColorReset)
		
		if !scanner.Scan() {
			break
		}
		
		input := scanner.Text()
		input = strings.TrimSpace(strings.ToLower(input))
		
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
		switch input {
		case "quit", "exit", "q":
			fmt.Println(ColorGreen + "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!" + ColorReset)
			return
		case "help", "h":
			showHelp()
			continue
		case "":
			continue
		}
		
		// –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
		seconds, err := parseInput(input)
		if err != nil {
			fmt.Printf("%s‚ùå –û—à–∏–±–∫–∞: %s%s\n\n", ColorRed, err.Error(), ColorReset)
			continue
		}
		
		// –ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
		fmt.Printf("%s–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏ Enter): %s", ColorWhite, ColorReset)
		scanner.Scan()
		message := strings.TrimSpace(scanner.Text())
		
		// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
		timer := NewTimer(seconds, message)
		timer.Start()
		
		// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä
		fmt.Printf("\n%süîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä? (–¥–∞/–Ω–µ—Ç): %s", ColorWhite, ColorReset)
		scanner.Scan()
		again := strings.TrimSpace(strings.ToLower(scanner.Text()))
		
		if again != "–¥–∞" && again != "yes" && again != "y" && again != "" {
			fmt.Println(ColorGreen + "üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞!" + ColorReset)
			break
		}
		
		fmt.Println()
	}
	
	if err := scanner.Err(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞: %v", err)
	}
}
